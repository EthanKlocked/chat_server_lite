version: '3'
services:
    nginx:
        image: nginx:latest
        ports:
            - '80:80'
            - '443:443'
        volumes:
            - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
            - certbot_conf:/etc/letsencrypt # named volume 사용
            - certbot_www:/var/www/certbot # named volume 사용
        command: '/bin/sh -c ''while :; do sleep 6h & wait $${!}; nginx -s reload; done & nginx -g "daemon off;"'''
        depends_on:
            - socket-server
        networks:
            - app_network

    certbot:
        image: certbot/certbot
        volumes:
            - certbot_conf:/etc/letsencrypt # named volume 사용
            - certbot_www:/var/www/certbot # named volume 사용
        entrypoint: "/bin/sh -c 'trap exit TERM; while :; do certbot renew; sleep 12h & wait $${!}; done;'"

    socket-server:
        build: .
        env_file:
            - .env.prod
        expose:
            - '3003'
        depends_on:
            redis:
                condition: service_healthy # Redis가 완전히 준비될 때까지 대기
        networks:
            - app_network
        restart: unless-stopped

    redis:
        image: redis:alpine
        command: ['redis-server', '--requirepass', '${REDIS_PASSWORD}']
        volumes:
            - redis_data:/data
        expose:
            - '6379'
        networks:
            - app_network
        restart: unless-stopped
        healthcheck: # 헬스체크 추가
            test: ['CMD', 'redis-cli', 'ping']
            interval: 5s
            timeout: 3s
            retries: 5

volumes:
    certbot_conf: # certbot conf 볼륨 정의
    certbot_www: # certbot www 볼륨 정의
    redis_data:

networks:
    app_network:
        driver: bridge
